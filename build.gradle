buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url= "https://nexus.gking2224.me/nexus/content/repositories/releases" }
        maven { url= "https://nexus.gking2224.me/nexus/content/repositories/snapshots" }
    }
    dependencies {
        classpath "me.gking2224:gk-utils:0.0.+"
    }
}

plugins {
  id 'groovy'
}

apply plugin: 'eclipse'
apply plugin: 'maven'


// read secret properties into project
File secretPropsFile = new File("secret.properties")
if (secretPropsFile.exists()) {
    Properties secretProps = new Properties()
    secretPropsFile.withInputStream {is->
        secretProps.load(is)
    }
    secretProps.each {k,v ->
        project.ext[k] = v
    }
}

jar {
    
}

ext {
    artifactId = "me.gking2224.buildtoolsplugin.artifactid" // what does this do?
    defaultEncoding = "UTF-8"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url= "https://nexus.gking2224.me/nexus/content/repositories/releases" }
    maven { url= "https://nexus.gking2224.me/nexus/content/repositories/snapshots" }
}


project.uploadArchives {
    repositories {
        mavenDeployer {
            def repo = (project.version.contains("SNAPSHOT")) ? project["publish.repository.snapshot.url"] : project["publish.repository.release.url"]
            repository(url: repo) {
                authentication(userName: project["publish.repository.username"], password: project["publish.repository.password"])
            }
        }
    }
}

// versions
ext {
    junitVersion = '4.11'
    mockitoVersion = '1.10.19'
    jgitVersion = "4.4.0.201606070830-r"
}

install {
    repositories {
        if (project.hasProperty("localRepoUrl")) {
            mavenDeployer {
                repository(
                	url: project.localRepoUrl)
            }
        }
    }
}

task writeNewPom << {
    pom {
        project {
            inceptionYear '2016'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("$mavenPomDir/pom-default.xml")
}

tasks.uploadArchives.dependsOn << "writeNewPom"


dependencies {
    
    compile gradleApi()
    compile localGroovy()
    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'org.mockito', name: 'mockito-all', version: mockitoVersion
    compile "org.eclipse.jgit:org.eclipse.jgit:$jgitVersion"
    compile "org.eclipse.jgit:org.eclipse.jgit.junit:$jgitVersion"
    compile "com.jcraft:jsch:0.1.51"
    compile "me.gking2224:gk-utils:0.0.+"
    compile "org.codehaus.groovy:groovy-templates:2.4.7"
}

task wrapper(type: Wrapper)

eclipse {
    project {
        buildCommand 'org.eclipse.jdt.core.javabuilder'
        buildCommand 'org.springframework.ide.eclipse.core.springbuilder'
        natures 'org.eclipse.jdt.core.javanature',
                'org.springsource.ide.eclipse.gradle.core.nature',
                'org.springframework.ide.eclipse.core.springnature'
    }
    classpath {
        defaultOutputDir = file('build/classes')
        containers = [
            'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8',
            'org.springsource.ide.eclipse.gradle.classpathcontainer'  // Gradle IDE classpath container
        ]
        file {
            // exclude jar entries from .classpath
            whenMerged { classpath ->
                classpath.configure classpath.entries.grep { entry ->
                    !(entry instanceof org.gradle.plugins.ide.eclipse.model.Library)
                }
                classpath.entries.findAll {
                    it instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder && it.path.startsWith("src/test/")
                }*.output = "build/test-classes"
            }
        }
        downloadSources = true
        downloadJavadoc = true
    }
}